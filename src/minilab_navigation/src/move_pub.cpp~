#include <ros/ros.h>
#include <tf/tf.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Pose2D.h>
#include <nav_msgs/Odometry.h>
#include <math.h>


geometry_msgs::Pose2D current_pose_leader;
ros::Publisher pub_pose2d;
float px_leader,py_leader,vx_leader;
void odomCallbackLeader(const nav_msgs::OdometryConstPtr& msg)
{
    // linear position
    current_pose_leader.x = msg->pose.pose.position.x;
    current_pose_leader.y = msg->pose.pose.position.y;
    px_leader=current_pose_leader.x;
    py_leader=current_pose_leader.y;
    vx_leader = msg->twist.twist.linear.x;
    // quaternion to RPY conversion
    tf::Quaternion q(
        msg->pose.pose.orientation.x,
        msg->pose.pose.orientation.y,
        msg->pose.pose.orientation.z,
        msg->pose.pose.orientation.w);
    tf::Matrix3x3 m(q);
    double roll, pitch, yaw;
    m.getRPY(roll, pitch, yaw);

    // angular position
    current_pose_leader.theta = yaw;
    pub_pose2d.publish(current_pose_leader);
}
geometry_msgs::Pose2D current_pose_agent1;
ros::Publisher pub_pose2dAgent1;
float px_agent1,py_agent1,vx_agent1;
void odomCallbackagent1(const nav_msgs::OdometryConstPtr& msg)
{
    // linear position
    current_pose_agent1.x = msg->pose.pose.position.x;
    current_pose_agent1.y = msg->pose.pose.position.y;
    px_agent1=current_pose_agent1.x;
    py_agent1=current_pose_agent1.y;
    vx_agent1 = msg->twist.twist.linear.x;
    // quaternion to RPY conversion
    tf::Quaternion q(
        msg->pose.pose.orientation.x,
        msg->pose.pose.orientation.y,
        msg->pose.pose.orientation.z,
        msg->pose.pose.orientation.w);
    tf::Matrix3x3 m(q);
    double roll, pitch, yaw;
    m.getRPY(roll, pitch, yaw);

    // angular position
    current_pose_leader.theta = yaw;
    pub_pose2d.publish(current_pose_agent1);
}

int main(int argc, char **argv)
{
    const double PI = 3.14159265358979323846;
    double u=0;
    double u_integral = 0;
    ros::Time prev_time;
    ros::Duration delta_t;
    ROS_INFO("start");

    ros::init(argc, argv, "move_pub");
    ros::NodeHandle n;
    ros::Subscriber sub_odometry = n.subscribe("/leader/odom", 10, odomCallbackLeader);
    ros::Publisher movement_pub = n.advertise<geometry_msgs::Twist>("/leader/cmd_vel",10); 
    //for sensors the value after , should be higher to get a more accurate result (queued)
    pub_pose2d = n.advertise<geometry_msgs::Pose2D>("/leader/pose2d", 10);
    ros::Subscriber sub_odometryAgent1 = n.subscribe("/agent1/odom", 10, odomCallbackagent1);
    ros::Publisher movement_pubAgent1 = n.advertise<geometry_msgs::Twist>("/agent1/cmd_vel",10); 
    //for sensors the value after , should be higher to get a more accurate result (queued)
    pub_pose2dAgent1 = n.advertise<geometry_msgs::Pose2D>("/agent1/pose2d", 10);
    ros::Rate rate(10); //the larger the value, the "smoother" , try value of 1 to see "jerk" movement
  
  // calculate delta_t
 
    delta_t = ros::Time::now() - prev_time;
    prev_time = ros::Time::now();
    u_integral += u*delta_t.toSec(); 
    
    //move forward 1
    ROS_INFO("move forward 1 meter");
    ros::Time start1 = ros::Time::now();
    while(ros::ok() && current_pose_leader.x < 2.0)
    {
        geometry_msgs::Twist move;
        //velocity controls
        move.linear.x = 0.2; //speed value m/s
        move.angular.z = 0;
        movement_pub.publish(move);

        ros::spinOnce();
        rate.sleep();
    }

    //move forward 2
    ROS_INFO("move backward 1 meter");
    ros::Time start2 = ros::Time::now();
    while(ros::ok() && current_pose_agent1.x > -2.0)
    {
        geometry_msgs::Twist move;
        //velocity controls
        move.linear.x = - 0.2; //speed value m/s
        move.angular.z = 0;
        movement_pubAgent1.publish(move);

        ros::spinOnce();
        rate.sleep();
    }

    //turn left
    ROS_INFO("turn left 90 degree");
    ros::Time start_turn1 = ros::Time::now();
    while(ros::ok() && current_pose_leader.theta < PI/2 )
    {
        geometry_msgs::Twist move;
        //velocity controls
        move.linear.x = 0; //speed value m/s
        move.angular.z = 0.3;
        movement_pub.publish(move);

        ros::spinOnce();
        rate.sleep();
        u++;
    }

    //turn right
    ROS_INFO("turn right 180 degree");
    ros::Time start_turn2 = ros::Time::now();
    while(ros::ok() && current_pose_leader.theta > -PI/2)
    {
        geometry_msgs::Twist move;
        //velocity controls
        move.linear.x = 0; //speed value m/s
        move.angular.z = -0.3;
        movement_pub.publish(move);
	u++;
        ros::spinOnce();
        rate.sleep();
    }

  ROS_INFO("value of u is [%f]",u);
    // just stop
    while(ros::ok()) {
        geometry_msgs::Twist move;
        move.linear.x = 0;
        move.angular.z = 0;
        movement_pub.publish(move);

        ros::spinOnce();
        rate.sleep();
    }

    return 0;
}
